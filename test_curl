curl -X POST -F "file=@test.txt" http://localhost:3000/upload
curl -X DELETE http://localhost:3000/delete

./.vscode
./.vscode/settings.json
./cgi-bin/script_1.js
./cgi-bin
./cgi-bin/script_2.php
./cgi-bin/script_3.py
./config
./config/Default_config.conf
./data
./data/upload_checker.html
./data/index.html
./Error_Page
./Error_Page/style.css
./Error_Page/400.html
./Error_Page/404.html
./Error_Page/413.html
./Error_Page/500.html
./Error_Page/504.html
./includes
./includes/ConfigParse.hpp
./includes/WebServer.hpp
./srcs
./srcs/ConfigParse.cpp
./srcs/load_config.cpp
./srcs/main.cpp
./srcs/WebServer.cpp
./Upload_File
./Makefile


    for (it = Ports.begin(); it != Ports.end(); ++it) // check multi port
    {
        int port = *it;
        serverSocket = socket(AF_INET, SOCK_STREAM, 0);

        struct sockaddr_in serverAddress;
        serverAddress.sin_family = AF_INET;
        serverAddress.sin_addr.s_addr = INADDR_ANY;
        serverAddress.sin_port = htons(port);
    
        bind(serverSocket, (struct sockaddr*)&serverAddress, sizeof(serverAddress));
        cout << "Bind : " << serverSocket << endl;
        listen(serverSocket, atoi(config.get_maxClients().c_str()));
        cout << "Listening on http://localhost:" << port << endl;
    
        _fd.fd = serverSocket;
        _fd.events = POLLIN;
        listeningSocket.insert(serverSocket);
        fds.push_back(_fd);
        //NEW
        listeningPortMap[serverSocket] = port;
        //fds.push_back({serverSocket, POLLIN}); // c++11
    }